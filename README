This is my work for my Senior Project. The goal is to build a fractal
visualization tool for 2d and 3d fractals.

Coded for Linux x86
Using Opengl:
	mesa-common-dev
Using SDL 1.2:
	libsdl1.2-dev
	libsdl-image1.2-dev
	libsdl-mixer1.2-dev
	libsdl-net1.2-dev


Development Progress
10/6/12 - After using a basic iteration on some points using a random number 
	generator to give me a random distribution, I have found a few problems.
	I didn't think about the need to store the points to prevent having to
	run through the generation with each frame which is very costly. I also
	didnt think about how difficult it will be to have a pretty picture
	from this plane iteration. After poking around on the internet I think
	the ansewer is going to be in writing a shader to do the rendering and
	compiling the shader on the fly based on user input. I have never wrote
	a shader before so that is what I must learn next.

10/10/12- Discovered a silly error where I was rendering a point at each depth
        of the iteration causing major performance drop. After the correction
        performance is at least resonble for this intial aprroach. I will 
        continue looking at the Shader language to see if there is a better way
        to use there. I have had the idea though that what might be best is to
        generate all the points at the offset and store them, then use 
        interpolation to give a general shape of the fractal. I am concerned at
        the mathematics behind such a method but I do belive using the random
        path frame by frame is eating unnecussary resources but I most likely 
        need that for unlimited zooming. Exploration of these ideas are needed.
